###########################################################################################################################################
#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved                                                                  #
#                                                                                                                                          #
#  Licensed under the MIT No Attribution License (MIT-0) (the ‘License’). You may not use this file except in compliance                   #
#  with the License. A copy of the License is located at                                                                                   #
#                                                                                                                                          #
#      https://opensource.org/licenses/MIT-0                                                                                               #
#                                                                                                                                          #
#  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files        #
#  (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,     #
#  publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so.  #
#  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR #
#  ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH  # 
#  THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              #
############################################################################################################################################

# Location-based Notifications Using Amazon Pinpoint solution
#
# template for location-based-notifications-using-amazon-pinpoint
# **DO NOT DELETE**
#
# author: 
#   - Ciro Santos (cirosant@)
#   - Paulo Aragão (paragao@)
#   - aws-solutions-builder@

AWSTemplateFormatVersion: '2010-09-09'

Description: "(SO0099c) - The AWS Cloudformation template for deploymnet of the Location-based Notifications Using Amazon Pinpoint solution"

Parameters:
  SolutionsBucket:  
    Description: original solutions bucket 
    Type: String
  SolutionsPrefix:
    Description: original solutions prefix 
    Type: String
  DDBTable:
    Description: Amazon DynamoDB Table created in the main stack
    Type: String
  DDBStreamsArn:
    Description: Amazon DynamoDB Streams Arn from the main stack
    Type: String
  DDBEventSourceArn:
    Description: Arn of the DynamoDB Streams to be used with the IndexDDBDataToES lambda function
    Type: String
  ESUserPoolId:
    Description: Cognito User Pool to be used as an authentication method for the Kibana dashboard
    Type: String
  ESUserPoolArn: 
    Description: Cognito User Pool Arn
    Type: String  
  ESUserPoolProviderName: 
    Description: Cognito User Pool Provider Name
    Type: String

Resources: 
  SearchSlowEsDomainLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'location-based-notifications/esDomain/search-slow'
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete

  IndexSlowEsDomainLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'location-based-notificatons/esDomain/index-slow'
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete

  GeofenceEsDomain:
    Type: 'AWS::Elasticsearch::Domain'
    Properties:
      AccessPolicies:
        Statement:
          - Action: 
              - 'es:ESHttpGet'
              - 'es:ESHttpPut'
              - 'es:ESHttpPost'
              - 'es:ESHttpHead'
              - 'es:ESHttpDelete'
              - 'es:ESHttpPatch'            
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${IndexDDBDataToESServiceRole}
            Resource: !Sub arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/*
          - Action: 
              - 'es:ESHttpGet'
              - 'es:ESHttpPut'
              - 'es:ESHttpPost'
              - 'es:ESHttpHead'
              - 'es:ESHttpDelete'
              - 'es:ESHttpPatch'
            Effect: Allow
            Principal:
              AWS: !GetAtt GeofenceIdentityPoolESAuthRole.Arn
            Resource: !Sub arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/*
        Version: '2012-10-17'
      CognitoOptions:
        Enabled: true
        IdentityPoolId: !Ref GeofenceESIdentityPool
        RoleArn: !GetAtt CognitoESRole.Arn
        UserPoolId: !Ref ESUserPoolId
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      ElasticsearchClusterConfig:
        InstanceCount: 3
        InstanceType: t3.medium.elasticsearch
        ZoneAwarenessEnabled: true
        ZoneAwarenessConfig:
          AvailabilityZoneCount: 3
        DedicatedMasterEnabled: true
        DedicatedMasterType: t3.medium.elasticsearch
        DedicatedMasterCount: 3
      ElasticsearchVersion: '7.4'
      DomainEndpointOptions:
        EnforceHTTPS: True
        TLSSecurityPolicy: 'Policy-Min-TLS-1-2-2019-07'
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
    UpdatePolicy:
      EnableVersionUpgrade: True
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    DependsOn:
      - GeofenceCognitoESUserPoolDomain

  CognitoESRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: es.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'cognito-idp:DescribeUserPool'
                  - 'cognito-idp:CreateUserPoolClient'
                  - 'cognito-idp:DeleteUserPoolClient'
                  - 'cognito-idp:DescribeUserPoolClient'
                  - 'cognito-idp:ListUserPoolClients'
                  - 'cognito-identity:DescribeIdentityPool'
                  - 'cognito-identity:UpdateIdentityPool'
                  - 'cognito-identity:GetIdentityPoolRoles'
                Effect: Allow
                Resource: 
                  - !Ref ESUserPoolArn
                  - !Sub 
                    - arn:${AWS::Partition}:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${GeofenceESIdP}
                    - { GeofenceESIdP: !Ref GeofenceESIdentityPool } 
          PolicyName: CognitoEsAccessPolicy
        - PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Action: 
                  - 'iam:PassRole'
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/* 
          PolicyName: CognitoESPassRole
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'es:ESHttpGet'
                  - 'es:ESHttpPut'
                  - 'es:ESHttpPost'
                  - 'es:ESHttpHead'
                  - 'es:ESHttpDelete'
                  - 'es:ESHttpPatch'
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/*
          PolicyName: 'AllowESHttpAccess'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  ESAppClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      UserPoolId: !Ref ESUserPoolId 
      ClientName: !Sub 
        - GeofenceESAppClient-${Hash}
        - { Hash: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]] }
      GenerateSecret: false

  GeofenceESIdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref ESAppClient
          ProviderName: !Ref ESUserPoolProviderName
      IdentityPoolName: !Sub GeofenceESIdentityPool-${AWS::Region}-${AWS::AccountId}

  GeofenceIdentityPoolESAuthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
        Version: '2012-10-17'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  
  GeofenceIdentityPoolESRoleAttachment:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref GeofenceESIdentityPool
      Roles:
        authenticated: !GetAtt 
          - GeofenceIdentityPoolESAuthRole
          - Arn
    DependsOn:
      - GeofenceESIdentityPool

  GeofenceESAuthPolicy: 
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 
              - 'es:ESHttpGet'
              - 'es:ESHttpPut'
              - 'es:ESHttpPost'
              - 'es:ESHttpHead'
              - 'es:ESHttpDelete'
              - 'es:ESHttpPatch'
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/*
        Version: '2012-10-17'
      PolicyName: !Sub 
        - GeofenceESAuthPolicy-${Hash}
        - { Hash: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]] }
      Roles:
        - !Ref GeofenceIdentityPoolESAuthRole
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  GeofenceCognitoESUserPoolDomain: 
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      Domain: !Sub 
        - location-based-${Hash}
        - { Hash: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]] }
      UserPoolId: !Ref ESUserPoolId 
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W54
            reason: Will add a feature to allow user to choose its own CMK or create a new one

  SingletonLambdaServiceRole:
    Type: 'AWS::IAM::Role'
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*

  SingletonLambdaServiceRoleDefaultPolicy:
    Type: 'AWS::IAM::Policy'
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      PolicyDocument:
        Statement:
          - Action: 
              - 'es:ESHttpDelete'
              - 'es:ESHttpGet'
              - 'es:ESHttpHead'
              - 'es:ESHttpPost'
              - 'es:ESHttpPut'
              - 'es:ESHttpPatch'
              - 'es:CreateElasticsearchServiceRole'
              - 'es:DeleteElasticsearchServiceRole'
              - 'es:DescribeElasticsearchDomain'
              - 'es:DescribeElasticsearchDomainConfig'
              - 'es:DescribeElasticsearchDomains'
              - 'es:ListDomainNames'
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/*
        Version: '2012-10-17'
      PolicyName: !Join 
        - ''
        - - SingletonLambdaServiceRoleDefaultPolicy
          - !Select 
            - 4
            - !Split 
              - '-'
              - !Select 
                - 2
                - !Split 
                  - /
                  - !Ref 'AWS::StackId'
      Roles:
        - !Ref SingletonLambdaServiceRole

  SingletonLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref SolutionsBucket
        S3Key: !Join
          - ''
          - - !Ref SolutionsPrefix
            - 'es-custom-resource-js.zip'
      Handler: es-requests.handler
      Role: !GetAtt 
        - SingletonLambdaServiceRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          REGION: !Ref 'AWS::Region'
          DOMAIN: !GetAtt 
            - GeofenceEsDomain
            - DomainEndpoint
      Timeout: 300
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    DependsOn:
      - GeofenceEsDomain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: using an inline policy that allows to write to CloudWatch Logs.

  GeofenceESCustomResource:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt 
        - SingletonLambda
        - Arn
      Requests:
        - method: POST
          path: _plugin/kibana/api/saved_objects/_import?overwrite=true
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain

  IndexDDBDataToESServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:location-based-notifications/esDomain/search-slow:*
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:location-based-notifications/esDomain/index-slow:*

  IndexDDBDataToESServiceRoleDefaultPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'dynamodb:DescribeStream'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:ListStreams'
            Effect: Allow
            Resource: !Ref DDBStreamsArn
          - Action: 
              - 'es:ESHttpDelete'
              - 'es:ESHttpGet'
              - 'es:ESHttpHead'
              - 'es:ESHttpPost'
              - 'es:ESHttpPut'
              - 'es:ESHttpPatch' 
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/*
        Version: '2012-10-17'
      PolicyName: !Join
        - '-'
        - - IndexDDBDataToESServiceRoleDefaultPolicy 
          - !Select 
            - 4
            - !Split 
              - '-'
              - !Select 
                - 2
                - !Split 
                  - /
                  - !Ref 'AWS::StackId'
      Roles:
        - !Ref IndexDDBDataToESServiceRole

  IndexDDBDataToES:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref SolutionsBucket
        S3Key: !Join
          - ''
          - - !Ref SolutionsPrefix
            - 'indexDdbDataToEs.zip'
      Handler: indexDdbDataToEs.handler
      Role: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${IndexDDBDataToESServiceRole}
      Runtime: python3.7
      Environment:
        Variables:
          REGION: !Ref 'AWS::Region'
          ES_HOST: !GetAtt 
            - GeofenceEsDomain
            - DomainEndpoint
    DependsOn:
      - IndexDDBDataToESServiceRole
      - GeofenceEsDomain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: using an inline policy that allows to write to CloudWatch Logs.

  lambdaDDBStreamEventSource:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn: !Ref DDBEventSourceArn
      FunctionName: !Ref IndexDDBDataToES
      BatchSize: 1
      Enabled: true
      StartingPosition: LATEST

Outputs:
  AnalyticsDashboardURL:
    Description: URL for the Kibana dashboard on the Amazon Elasticsearch domain
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - GeofenceEsDomain
          - DomainEndpoint
        - /_plugin/kibana/  